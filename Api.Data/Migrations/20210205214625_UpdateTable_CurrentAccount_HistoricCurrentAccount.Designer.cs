// <auto-generated />
using System;
using Api.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Data.Migrations
{
    [DbContext(typeof(MyContext))]
    [Migration("20210205214625_UpdateTable_CurrentAccount_HistoricCurrentAccount")]
    partial class UpdateTable_CurrentAccount_HistoricCurrentAccount
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Api.Domain.Entities.CurrentAccount.CurrentAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("Balance")
                        .HasColumnName("vl_balance")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreateAt")
                        .IsRequired()
                        .HasColumnName("dt_create")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("dt_update")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("UserId")
                        .HasColumnName("id_user")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("TB_CURRENT_ACCOUNT");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f7f8325d-7dab-425b-a59d-2e25f5354c62"),
                            Balance = 1000m,
                            CreateAt = new DateTime(2021, 2, 5, 21, 46, 24, 361, DateTimeKind.Utc).AddTicks(4373),
                            UpdateAt = new DateTime(2021, 2, 5, 21, 46, 24, 361, DateTimeKind.Utc).AddTicks(4373),
                            UserId = new Guid("3362d96b-e3ff-4cc8-85b5-da08a612e62f")
                        },
                        new
                        {
                            Id = new Guid("cee743f5-513c-4464-98d2-6e8dfaba1038"),
                            Balance = 0m,
                            CreateAt = new DateTime(2021, 2, 5, 21, 46, 24, 361, DateTimeKind.Utc).AddTicks(4373),
                            UpdateAt = new DateTime(2021, 2, 5, 21, 46, 24, 361, DateTimeKind.Utc).AddTicks(4373),
                            UserId = new Guid("b171c698-abec-418c-9357-80d0b9199d1c")
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CurrentAccount.HistoricCurrentAccountEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<decimal>("AmountMoved")
                        .HasColumnName("vl_amount_moved")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("CreateAt")
                        .IsRequired()
                        .HasColumnName("dt_create")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("CurrentAccountId")
                        .HasColumnName("id_current_account")
                        .HasColumnType("char(36)");

                    b.Property<string>("Movement")
                        .IsRequired()
                        .HasColumnName("ds_movement")
                        .HasColumnType("varchar(1) CHARACTER SET utf8mb4")
                        .HasMaxLength(1);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("dt_update")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentAccountId");

                    b.ToTable("TB_HISTORIC_CURRENT_ACCOUNT");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a33f9455-ccb4-4b77-83ba-16dd3a7436a3"),
                            AmountMoved = 1000m,
                            CreateAt = new DateTime(2021, 2, 5, 21, 46, 24, 361, DateTimeKind.Utc).AddTicks(4373),
                            CurrentAccountId = new Guid("f7f8325d-7dab-425b-a59d-2e25f5354c62"),
                            Movement = "D"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.User.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Cpf")
                        .IsRequired()
                        .HasColumnName("ds_cpf")
                        .HasColumnType("varchar(11) CHARACTER SET utf8mb4")
                        .HasMaxLength(11);

                    b.Property<DateTime?>("CreateAt")
                        .IsRequired()
                        .HasColumnName("dt_create")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("ds_email")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("nm_name")
                        .HasColumnType("varchar(60) CHARACTER SET utf8mb4")
                        .HasMaxLength(60);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("ds_password")
                        .HasColumnType("varchar(100) CHARACTER SET utf8mb4")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnName("dt_update")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique();

                    b.ToTable("TB_USER");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3362d96b-e3ff-4cc8-85b5-da08a612e62f"),
                            Cpf = "01194433502",
                            CreateAt = new DateTime(2021, 2, 5, 21, 46, 24, 120, DateTimeKind.Utc).AddTicks(9436),
                            Email = "admin@mail.com",
                            Name = "João",
                            Password = "$2b$10$/UzCXCmRbxmkE3rXwn8r1efR/Gh40gM72zHNvzvObq3HLwVjKySeS"
                        },
                        new
                        {
                            Id = new Guid("b171c698-abec-418c-9357-80d0b9199d1c"),
                            Cpf = "26687020544",
                            CreateAt = new DateTime(2021, 2, 5, 21, 46, 24, 120, DateTimeKind.Utc).AddTicks(9436),
                            Email = "jose@mail.com",
                            Name = "José",
                            Password = "$2b$10$2BnbmaBHM7/Mh1k8iUWE1eV8BVzQwvnFVQeqXEwPOAiMZirt/llvW"
                        });
                });

            modelBuilder.Entity("Api.Domain.Entities.CurrentAccount.CurrentAccountEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.User.UserEntity", "User")
                        .WithOne("CurrentAccount")
                        .HasForeignKey("Api.Domain.Entities.CurrentAccount.CurrentAccountEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Api.Domain.Entities.CurrentAccount.HistoricCurrentAccountEntity", b =>
                {
                    b.HasOne("Api.Domain.Entities.CurrentAccount.CurrentAccountEntity", "CurrentAccount")
                        .WithMany("Historic")
                        .HasForeignKey("CurrentAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
